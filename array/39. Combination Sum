///32ms跑完测试用例
class Solution {
    
private:
    void helper(vector<int>& candidates,int start,int end,int sum,int target,vector<vector<int>>& res,vector<int>& mid_res)
    {
        //std::cout<<sum<<std::endl;
        if(sum==target)
        {
            res.push_back(mid_res);
            //mid_res.clear();
            return;
        }
        else if(sum>target)
        {
            return;
        }
        for(int i=start;i<end;i++)
        {
            mid_res.push_back(candidates[i]);
            helper(candidates,i,end,sum+candidates[i],target,res,mid_res);
            mid_res.pop_back();
            
        }
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        std::sort(candidates.begin(),candidates.end());
        vector<vector<int>> res;
        vector<int> mid_res;
        int size=candidates.size();
        helper(candidates,0,size,0,target,res,mid_res);
        return res;
    }
};
///不使用sort的方式19ms
class Solution {
    
private:
    void helper(vector<int>& candidates,int start,int end,int sum,int target,vector<vector<int>>& res,vector<int>& mid_res)
    {
        //std::cout<<sum<<std::endl;
        if(sum==target)
        {
            res.push_back(mid_res);
            //mid_res.clear();
            return;
        }
        else if(sum>target)
        {
            return;
        }
        for(int i=start;i<end;i++)
        {
            mid_res.push_back(candidates[i]);
            helper(candidates,i,end,sum+candidates[i],target,res,mid_res);
            mid_res.pop_back();
            
        }
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        ///std::sort(candidates.begin(),candidates.end());
        vector<vector<int>> res;
        vector<int> mid_res;
        int size=candidates.size();
        helper(candidates,0,size,0,target,res,mid_res);
        return res;
    }
};
///基于sort做改进！！！19ms
class Solution {
    
private:
    void helper(vector<int>& candidates,int start,int end,int sum,int target,vector<vector<int>>& res,vector<int>& mid_res,bool& flag)
    {
        //std::cout<<sum<<std::endl;
        if(sum==target)
        {
            res.push_back(mid_res);
            //mid_res.clear();
            flag=true;
            return;
        }
        else if(sum>target)
        {
            flag=true;
            return;
        }
        for(int i=start;i<end;i++)
        {
            mid_res.push_back(candidates[i]);
            helper(candidates,i,end,sum+candidates[i],target,res,mid_res,flag);
            mid_res.pop_back();
            if(flag)
            {
                flag=false;
                break;
            }
        }
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        std::sort(candidates.begin(),candidates.end());
        vector<vector<int>> res;
        vector<int> mid_res;
        int size=candidates.size();
        bool flag=false;
        helper(candidates,0,size,0,target,res,mid_res,flag);
        return res;
    }
};
