/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool myfunction(Interval& a, Interval& b)
 {
     if(a.start<b.start)
        return true;
     else
        return false;
 }
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        int size=intervals.size();
        vector<Interval> res;
        if(size==0)
            return res;
        if(size==1)
        {
            res.push_back(intervals[0]);
            return res;
        }
        std::sort(intervals.begin(),intervals.end(),myfunction);
        for(int i=0;i<size-1;i++)
        {
            if(intervals[i].end < intervals[i+1].start)
            {
                res.push_back(intervals[i]);
                continue;
            }
            
            if(intervals[i].start <= intervals[i+1].start && intervals[i].end <= intervals[i+1].end)
            {
                intervals[i+1].start=intervals[i].start;
            }
            else if(intervals[i].start >= intervals[i+1].start && intervals[i].end <= intervals[i+1].end)
            {
                ;
            }
            else if(intervals[i].start <= intervals[i+1].start && intervals[i].end >= intervals[i+1].end)
            {
                intervals[i+1].start=intervals[i].start;
                intervals[i+1].end=intervals[i].end;
            }
            else if(intervals[i].start >= intervals[i+1].start && intervals[i].end >= intervals[i+1].end)
            {
                intervals[i+1].end=intervals[i].end;
            }
        }
        
        res.push_back(intervals[size-1]);
        return res;
    }
};
