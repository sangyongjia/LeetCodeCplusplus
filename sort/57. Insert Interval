/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        int size=intervals.size();
        vector<Interval> res;
        bool flag=false;
        for(int i=0;i<size;i++)
        {
            //std::cout<<i<<std::endl;
            
            if(flag)
            {
                res.push_back(intervals[i]);
                continue;
            }
            if(intervals[i].end < newInterval.start)
            {
                res.push_back(intervals[i]);
                //std::cout<<"one"<<std::endl;
                continue;
            }
            if(intervals[i].start > newInterval.end)
            {
                res.push_back(newInterval);
                res.push_back(intervals[i]);
                flag=true;
                continue;
            }
            if(intervals[i].start <= newInterval.start && intervals[i].end <= newInterval.end)
            {
                newInterval.start=intervals[i].start;
                //std::cout<<newInterval.start<<" "<<newInterval.end<<std::endl;
                
            }
            else if(intervals[i].start >= newInterval.start && intervals[i].end <= newInterval.end)
            {
                ;
            }
            else if(intervals[i].start <= newInterval.start && intervals[i].end >= newInterval.end)
            {
                newInterval.start=intervals[i].start;
                newInterval.end=intervals[i].end;
            }
            else if(intervals[i].start >= newInterval.start && intervals[i].end >= newInterval.end)
            {
                newInterval.end=intervals[i].end;
                //newInterval.start=intervals[i].start;
            }
            
        }
        
        //std::cout<<newInterval.start<<" "<<newInterval.end<<std::endl;
        
        if(!flag)
            res.push_back(newInterval);
        //std::cout<<res.size()<<std::endl;
        
        return res;
    }
};
